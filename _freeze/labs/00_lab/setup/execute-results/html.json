{
  "hash": "cf3308e494bab95794593450ee090a0b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"General Instructions\"\nformat: html\n---\n\n\n::: callout-note\n## Objectives\nThis setup tutorial is optional for those who are interested in the following:\n\n1. Learning about (and using) virtual environments in R to ensure reproducibility (benefits explained below).\n\n2. Learning about using python üêç in (and with) R. This is useful for some ML lab sessions, and cutting-edge ML is often first implemented in python.\n\nIf you are not interested in either objective, skip this Rmd and jump into the modelling exercises starting with `KNN`.\n:::\n\n::: callout-tip\n## Accessing the source code\nAlthough we do not provide the Rmd file for the source code, you can always use the `</> Code` button on the top right of the page to get the source code.\n:::\n\n\n<!-- Setting the rmardkown global options -->\n\n\n\n\n\n# Virtual environments in R (`renv`)\n\n## The What & The Why\n\nAs you start working on machine learning in R, you'll be using various R packages that provide different functionalities. As you might know, managing multiple packages and their dependencies can be a daunting task, especially when you're new to programming.\n\nThis is where **`renv`** comes in handy. **`renv`** is a package management tool that helps you manage the packages used in an R project, making it easier to handle dependencies and ensuring that your project is reproducible. Here are some specific reasons why **`renv`** is particularly useful for machine learning lab sessions:\n\n1.  Consistent environment: When you work on machine learning lab sessions, you'll often be working with complex models that use multiple R packages. It's crucial to ensure that all the packages used in your project are compatible with each other. With **`renv`**, you can create a consistent environment by isolating the packages used in your project and making sure they work well together.\n\n2.  Easy installation and setup: **`renv`** makes it easy to set up a new R project with the required packages. Once you've created an **`renv`** project, you can easily install all the required packages with a single command. This saves you time and ensures that you have all the necessary packages for your machine learning lab sessions.\n\n3.  Reproducibility: Reproducibility is critical in machine learning lab sessions. With **`renv`**, you can easily share your code and the exact packages used in your project with your peers or instructors, making it easy for them to reproduce your results.\n\nIn summary, **`renv`** is an essential tool for managing packages in R and ensuring that your machine learning lab sessions are efficient and reproducible. It helps you avoid compatibility issues, simplifies installation and setup, and makes it easy to share your work with others. In python, you have similar tools such as `virtualenv`, `venv` and `conda`. We hope you find **`renv`** useful as you begin your journey into machine learning with R!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Check if renv is installed\nif (!require(\"renv\")) {\n  # Install renv if it is not already installed\n  install.packages(\"renv\")\n}\n```\n:::\n\n\n## The How\n\nTo create a new **`renv`** project, first set your working directory to the location where you want to create the project, and then run the command `renv::init()` which has to be executed only once. We recommend creating a main folder for all your ML-related exercises and running the command at the top directory. Running the initialization will create a bunch of auxiliary files, such as `renv.lock` to keep track of the packages that you're using and all their versions. If you move to another computer or something goes wrong with your packages, you can always re-install the packages listed in your `renv.lock` to the previous versions using `renv::restore()`. To occasionally update your packages, you can always use `renv::snapshot()`; however, every time that you start a new R session, if `renv` detects any changes, it will automatically ask you to run `renv::status()` to see if the list in `renv.lock` needs updating.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Check if renv is already initialized\nif (!file.exists(\"renv.lock\")) {\n  # Initialize renv project\n  renv::init()\n\n  # Restore packages\n  renv::restore()\n}\n```\n:::\n\n\n# Python **üêç** in R (`reticulate`)\n\n## Small Motivation\n\nMost careers after HEC require data literacy and data-driven insights to solve business problems. To that end, R is a potent tool; however, in the realm of machine learning, Python is arguably more demanded and, therefore, can be a good tool in your toolbox. Additionally, python is a widely-used language in the industry and offers powerful libraries for data manipulation, analysis, and modeling. Furthermore, you don't need to be a technical person to learn python as there are many resources available online, and it's a language that is relatively easy to pick up, even for absolute beginners to programming. Combining the strengths of both R and Python can enhance your workflow and improve your ability to work with data. To understand how R and Python compare, you are highly encouraged to watch [this video by IBM on R vs Python](https://www.youtube.com/watch?v=4lcwTGA7MZw).\n\n\n## Configuration\n\nYou need to follow a few steps to ensure that everything runs smoothly. There are several solutions for running the python part of the exercises. Our preferred method is to run python in R using the `reticulate` package as recently there has been a smooth integration between the two languages, especially if your IDE of choice (integrated development environment) is Rstudio. This library provides a comprehensive set of tools for interoperability (i.e., exchanging languages) between python and R. You can either do this in your own central python installation or use a virtual environment where we'll install the desired python packages. In python, virtual environments are similar to those of R (i.e. `renv`), allowing you to create isolated python installations, making it easier to manage different projects, and avoiding compatibility issues between dependencies. This setup usually works well, but if there are any individual issues, do not hesitate to contact me (Ilia). With that said, let's get started with python!\n\nFirst, load all the corresponding libraries to install and run python:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(reticulate)\nlibrary(tidyverse)\n```\n:::\n\n\nTo install python in R, we will use [miniconda](https://docs.conda.io/en/latest/miniconda.html), a smaller version of Anaconda package manager. If you don't have Miniconda or Anaconda, first run `reticulate::install_miniconda()`, which will automatically create a virtual environment for you.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# reticulate::install_miniconda() # if you got an error, you could also try `install_python()` or installing conda seperately on your OS\n```\n:::\n\n\nNow, we will create our virtual environment with the command `reticulate::conda_create()`. We will then make sure our rstudio is using this correct conda environment by enforcing it via `reticulate::use_condaenv()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# assign the right virtual environment for the exercises\nenv_name <- \"MLBA\"\n\n# if the virtual enviroment does not already exist, only then create then\nif (!env_name %in% reticulate::conda_list()$name) {\n  reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations\n}\n# make sure we're using the right environment\nreticulate::use_condaenv(env_name)\n\n# if you preferred, you can also use your own version of python with `use_python()`\n# you can see all the versions of your path here and which one has been assigned\nreticulate::py_config()\n\n# Check if python is setup properly now\nreticulate::py_available()\n```\n:::\n\n\nIf you have made it here so far and see the name `MLBA` in your python path, you have successfully installed/configured python and setup the virtual environment(s)ü•≥.\n\n### Bonus: Using Rstudio to select Python path\nIn case you wanted to use the Rstudio interface, you can always go to `Tools > Project Options` (or `Global Options` if you're not using `renv`) and then select the version inside the `Python` field as shown below.\n\n![](python_rstudio_global_options.JPG)\n\n## Python (very brief) overview\nWe do not teach the principles of python programming during this course. With that said, if you already have a background in R from your previous courses (e.g., *DSFBA*, *QMM*), we provide a few links to help you get started. If you're new to python, feel free to continue reading; otherwise, skip to the section [Calling Python in R](#use-python-in-r).\n\nIf you would like to see a crash course in python on different data structures and types, check out this video on [Python for Data Science \\[Crash Course\\]](https://www.youtube.com/watch?v=eAoZjemZXrM) (you can skip the installation part). You may notice that much of the syntax is similar to R. \n\n### Python data-oriented libraries\nPython provides a range of libraries for data manipulation, analysis, and modeling, including `Pandas` (similar to `tibble`+`dplyr`), which offers easy-to-use data structures for working with tabular data, and NumPy (`dplyr`+`data.table`), which provides powerful tools for array manipulation, linear algebra, and Fourier analysis. For data visualization, python offers `Matplotlib` (similar to `plot()` in base R). For machine learning, `Scikit-learn` (similar to the `caret` package in R which we will be introduced later) provides a wide range of tools for classification, regression, clustering, and dimensionality reduction, while `Tensorflow` & `Keras` (both used for deep learning and neural networks) are also popular libraries in this space which are available in both R and Python. These libraries are just a few examples of the many tools available in python that can help you work with data and build machine learning models. If you're interested to learn about these libraries and how to manipulate Pandas dataframes, you can check out this other video on [Data Analysis with Python - Full Course for Beginners (Numpy, Pandas, Matplotlib, Seaborn)](https://www.youtube.com/watch?v=r-uOLxNrNk8) (it's slightly long).\n\n### Assigning variables in Python vs. R {#assign-vars}\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\nFor those of you new to python, there's an important difference between R and Python when assignment variables. In Python, when you assign a variable to another variable, you are creating a reference to the same object in memory, so any changes made to one variable will be reflected in the other variable as well. This is demonostrated in the example below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\na = [1, 2, 3]\nb = a\nprint(a, b)\nb[0] = 4 # we only change `b`\nprint(a, b) # the variable `a` also changed unlike how R treats the variable\n```\n:::\n\n\n::: callout-tip\n## Indexing in R vs. Python\nAnother difference between R & Python is that the index (first value of any object) starts from 0 (python) rather than 1 (R). So if you have a list, the first element is python is starting at element 0.\n:::\n\nTo create a separate copy of the object, you need to use the `.copy()` method (python way of saying a function).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\na = [1, 2, 3]\nb = a.copy() # create a separate copy of the list\nprint(a, b)\nb[0] = 4 # modify only `b`\nprint(a, b) # variable `a` does not change\n```\n:::\n\n\nIn R, on the other hand, assignment creates a copy by default, so you don't need to use a `.copy()` method. Any changes you make to one variable will not affect the other variable, because they are separate copies of the same object.\n\n## Calling Python in R {#use-python-in-r}\n### Installing Python libraries\n\nYou can install any python package in R using the `reticulate::py_install()` command. This is similar to calling `install.packages()` in R. You may have heard of CRAN in R, a central repository for all R packages. In Python, the equivalent of CRAN is PyPI (Python Package Index). If you want the latest version of the packages, it is recommended to install packages using `pip`. To do so, you must set the argument `pip=TRUE` inside `reticulate::py_install()`, as demonstrated below.\n\nWe will install all the packages we need for this particular setup. This should be go smoothly with the following command:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Install python package into virtual environment\nreticulate::py_install(c(\"jupyter\", \"pandas\", \"matplotlib\",\"statsmodels\",\"scikit-learn\", \"seaborn\", \"mlxtend\", \"lime\", \"mkl-service\", \"xgboost\", \"lime\", \"gap-stat\",\"scikit-learn-extra\"), envname = \"MLBA\", pip=TRUE)\n```\n:::\n\n\nLet's checked if the package is installed successfully.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# import package that is used for dealing with data.frames in Python (equivalent of tibble+dplyr)\npd <- reticulate::import(\"pandas\")\n# import the package for plotting in python\nplt <- reticulate::import(\"matplotlib.pyplot\")\n# import the library which we will use for linear regression\nsm <- reticulate::import(\"statsmodels.api\")\n```\n:::\n\n\nNo error messages? Then installation was successful!\n\n### Calling Python and R objects interchangeably\n\nAll the data types in R vs. Python are explained below (image from `reticulate`'s home page). If you need to explicitly change between objects in R and Python (usually R handles that automatically) to get the objects from the image above, you can use `reticulate::r_to_py()` and `reticulate::py_to_r()` (e.g., R dataframes to pandas dataframes).\n\n![](reticulate_r_python_objects.JPG)\n\nTo run objects from python in R, you have to use `$` to access their elements. For instance, when you want to load a python library, you can use `reticulate::import()` function and then assign it to a variable with the name of your choice as we did in the previous part. If that library contains a function (in python called module or sub-module), it always follows the format `LIBRARY$FUNCTION()`. We can see an example of that below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Using R\n## load mtcars dataset\ndata(mtcars)\n\n## plot it using base R plot function (or ggplot)\nplot(mtcars$mpg, mtcars$disp)\n\n# Using Python\n# plot it using matplotlib in python (or another python library for plots)\nplt$scatter(mtcars$mpg,mtcars$disp)\nplt$xlabel('mpg', fontsize = 12)\nplt$ylabel('disp', fontsize = 12)\n\n# save the figure and then include in the Rmd\nplt$savefig(\"pyplot.png\")\nknitr::include_graphics(\"pyplot.png\")\n# alternatively, when not knitting, you can uncomment and run the two following lines\n# instead of save the figure\n# plt$show() # you always have to call this for the plot to be made\n# plt$clf() #this means clear figure\n```\n:::\n\n\nNow, this is using R inside Python, but if you wanted to do it the other way around, that's also possible by using a dot `.` instead of `$`. If you're running python in markdown, you can replace `{r...}` at the beginning of the code chunk with `{python...}`, and it'll run python code. Additionally, if you would like to run a script instead (interactively or the whole script), you can do it by going to `file > New File > Python Script` in your Rstudio, and then running any part of your python script starts the interactive python session using `reticulate::repl_python()`. Alternatively, you can call the `repl_python()` to start the interactive session.\n\n```{{python}}\n# Your python code goes here\n```\n\nWe will now create a code chunk that purely runs Python and accesses the objects object with `r.OBJECT_NAME`:\n\n\n::: {.cell layout-align=\"center\" verbatim='true'}\n\n```{.python .cell-code}\n# we access mtcars dataset from R\nprint(r.mtcars.head())\n\nfrom sklearn import datasets\nimport pandas as pd\n\n# we open iris data from `sklearn` python package\niris = datasets.load_iris()\niris_data = pd.DataFrame(data=iris['data'], columns=iris['feature_names'])\n\n# Get the head of the DataFrame\nprint(iris_data.head())\n```\n:::\n\n\nWe can do the same thing in R by calling `py$OBJECT_NAME` by using `reticulate::py$OBJECT_NAME`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# plotting the iris data from python\nplot(py$iris_data)\n```\n:::\n\n\n## Modelling in R & Python\n\nLet's take a simple use case of making a regression in R and Python so you can see how the two languages compare:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# remove the spaces and `(cm)` from the column names\nnames(py$iris_data) <- gsub(' ', '_', names(py$iris_data))\nnames(py$iris_data) <- gsub('_\\\\(cm\\\\)', '', names(py$iris_data))\n\n# example of running a model on iris data\nr_lm <- lm(\"sepal_length ~. \", data = py$iris_data)\nsummary(r_lm)\n```\n:::\n\n\nWithin R, you can still use python to run the same linear regression with the `statsmodels` python library.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# example of runnning lm model in python -> firstly, process the data\n# specify your dependent variable and independent variables\ny_iris = select(py$iris_data, \"sepal_length\")\nx_iris = select(py$iris_data, -\"sepal_length\")\n\n# for python approach, we need to add a constant to predictor variables\nx_iris = sm$add_constant(x_iris)\n\n# create a linear regression model and fit it to the data\npy_lm = sm$OLS(y_iris, x_iris)$fit()\n\n# get the model summary\nprint(py_lm$summary())\n```\n:::\n\n\nAs you can see, the results are the same (those of `statsmodels` have been rounded). This could have also been done purely in python, as demonstrated below. Please note that here we have brought the iris data from python to R, then manipulated it in R (with the `select()` operation), and now we have two options to use these objects in pure python (just one is needed):\n\n\n-   We can simply call the objects from R by `r.x_iris` and `r.y_axis`.\n\n-   We can do the same `select()` operation in python with it's own syntax on the original python iris data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\npy_y_iris = iris_data[\"sepal_length\"]\npy_x_iris = iris_data.drop(\"sepal_length\", axis=1)\n```\n:::\n\n\nNeedless to say that in this case, the most efficient approach is the first one as demonstrated below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n# load the sm library with it's alias\nimport statsmodels.api as sm\n\n# add the constant again\nx_iris = sm.add_constant(r.x_iris)\n\n# create a linear regression model and fit it to the data\npy_lm = sm.OLS(r.y_iris, r.x_iris).fit()\n\n# get the model summary\nprint(py_lm.summary())\n```\n:::\n\n\nThe outcome is the same as calling python within R.\n\n# Closing words: Why not be `polyglot programmers`?\n\nThe possibilities for using R and Python are endless. With that said, the integration is not always perfect, therefore sometimes libraries don't translate entirely, and you have to play around with the two, but in most cases, the transition is seamless. Also, many other functions in `reticulate` can help you, which we haven't discussed here, such as `reticulate::source_python()` to run an entire python script, among many of it's other functions. Check out their page if you are interested to learn more.\n\n### References\n\n- [`rnev`: Introduction to `renv`](https://rstudio.github.io/renv/articles/renv.html)\n- [`reticulate`: R Interface to Python](https://rstudio.github.io/reticulate/)\n- [Python for Data Science \\[Crash Course\\]](https://www.youtube.com/watch?v=eAoZjemZXrM) \n- [Data Analysis with Python - Full Course for Beginners (Numpy, Pandas, Matplotlib, Seaborn)](https://www.youtube.com/watch?v=r-uOLxNrNk8)\n- [R vs Python](https://www.youtube.com/watch?v=4lcwTGA7MZw)\n",
    "supporting": [
      "setup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}